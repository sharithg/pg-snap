name: release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: create_release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: true
          prerelease: false

  build-release:
    name: build-release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
          - windows-x64
          - macos-x64
          - linux-x64
        include:
          - build: windows-x64
            os: windows-latest
            target: windows/amd64
          - build: macos-x64
            os: macos-latest
            target: darwin/amd64
          - build: linux-x64
            os: ubuntu-latest
            target: linux/amd64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.20.1"

      - name: Build release binary
        run: GOOS=${{ matrix.target.split('/')[0] }} GOARCH=${{ matrix.target.split('/')[1] }} go build -o pg-snap-${{ matrix.build }} ${{ github.workspace }}

      - name: Zip release binary (Windows)
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path pg-snap-${{ matrix.build }}.exe -DestinationPath pg-snap-${{ github.ref_name }}-${{ matrix.build }}.zip
        shell: pwsh

      - name: Tar release binary (Unix)
        if: matrix.os != 'windows-latest'
        run: tar cvfz pg-snap-${{ github.ref_name }}-${{ matrix.build }}.tar.gz pg-snap-${{ matrix.build }}

      - name: Upload release archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./pg-snap-${{ github.ref_name }}-${{ matrix.build }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: pg-snap-${{ github.ref_name }}-${{ matrix.build }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: application/octet-stream
