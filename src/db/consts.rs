use lazy_static::lazy_static;
use std::collections::HashMap;

lazy_static! {
    pub static ref SQL_TYPE_MAPPING: HashMap<&'static str, &'static str> = {
        let mut map = HashMap::new();
        map.insert("bool", "Boolean types");
        map.insert("bytea", "User-defined types");
        map.insert("char", "Internal-use types");
        map.insert("name", "String types");
        map.insert("int8", "Numeric types");
        map.insert("int2", "Numeric types");
        map.insert("int2vector", "Array types");
        map.insert("int4", "Numeric types");
        map.insert("regproc", "Numeric types");
        map.insert("text", "String types");
        map.insert("oid", "Numeric types");
        map.insert("tid", "User-defined types");
        map.insert("xid", "User-defined types");
        map.insert("cid", "User-defined types");
        map.insert("oidvector", "Array types");
        map.insert("pg_type", "Composite types");
        map.insert("pg_attribute", "Composite types");
        map.insert("pg_proc", "Composite types");
        map.insert("pg_class", "Composite types");
        map.insert("json", "User-defined types");
        map.insert("xml", "User-defined types");
        map.insert("pg_node_tree", "Internal-use types");
        map.insert("pg_ndistinct", "Internal-use types");
        map.insert("pg_dependencies", "Internal-use types");
        map.insert("pg_mcv_list", "Internal-use types");
        map.insert("pg_ddl_command", "Pseudo-types");
        map.insert("xid8", "User-defined types");
        map.insert("point", "Geometric types");
        map.insert("lseg", "Geometric types");
        map.insert("path", "Geometric types");
        map.insert("box", "Geometric types");
        map.insert("polygon", "Geometric types");
        map.insert("line", "Geometric types");
        map.insert("float4", "Numeric types");
        map.insert("float8", "Numeric types");
        map.insert("unknown", "unknown type");
        map.insert("circle", "Geometric types");
        map.insert("money", "Numeric types");
        map.insert("macaddr", "User-defined types");
        map.insert("inet", "Network address types");
        map.insert("cidr", "Network address types");
        map.insert("macaddr8", "User-defined types");
        map.insert("aclitem", "User-defined types");
        map.insert("bpchar", "String types");
        map.insert("varchar", "String types");
        map.insert("date", "Date/time types");
        map.insert("time", "Date/time types");
        map.insert("timestamp", "Date/time types");
        map.insert("timestamptz", "Date/time types");
        map.insert("interval", "Timespan types");
        map.insert("timetz", "Date/time types");
        map.insert("bit", "Bit-string types");
        map.insert("varbit", "Bit-string types");
        map.insert("numeric", "Numeric types");
        map.insert("refcursor", "User-defined types");
        map.insert("regprocedure", "Numeric types");
        map.insert("regoper", "Numeric types");
        map.insert("regoperator", "Numeric types");
        map.insert("regclass", "Numeric types");
        map.insert("regcollation", "Numeric types");
        map.insert("regtype", "Numeric types");
        map.insert("regrole", "Numeric types");
        map.insert("regnamespace", "Numeric types");
        map.insert("uuid", "User-defined types");
        map.insert("pg_lsn", "User-defined types");
        map.insert("tsvector", "User-defined types");
        map.insert("gtsvector", "User-defined types");
        map.insert("tsquery", "User-defined types");
        map.insert("regconfig", "Numeric types");
        map.insert("regdictionary", "Numeric types");
        map.insert("jsonb", "User-defined types");
        map.insert("jsonpath", "User-defined types");
        map.insert("txid_snapshot", "User-defined types");
        map.insert("pg_snapshot", "User-defined types");
        map.insert("int4range", "Range types");
        map.insert("numrange", "Range types");
        map.insert("tsrange", "Range types");
        map.insert("tstzrange", "Range types");
        map.insert("daterange", "Range types");
        map.insert("int8range", "Range types");
        map.insert("int4multirange", "Range types");
        map.insert("nummultirange", "Range types");
        map.insert("tsmultirange", "Range types");
        map.insert("tstzmultirange", "Range types");
        map.insert("datemultirange", "Range types");
        map.insert("int8multirange", "Range types");
        map.insert("record", "Pseudo-types");
        map.insert("_record", "Pseudo-types");
        map.insert("cstring", "Pseudo-types");
        map.insert("any", "Pseudo-types");
        map.insert("anyarray", "Pseudo-types");
        map.insert("void", "Pseudo-types");
        map.insert("trigger", "Pseudo-types");
        map.insert("event_trigger", "Pseudo-types");
        map.insert("language_handler", "Pseudo-types");
        map.insert("internal", "Pseudo-types");
        map.insert("anyelement", "Pseudo-types");
        map.insert("anynonarray", "Pseudo-types");
        map.insert("anyenum", "Pseudo-types");
        map.insert("fdw_handler", "Pseudo-types");
        map.insert("index_am_handler", "Pseudo-types");
        map.insert("tsm_handler", "Pseudo-types");
        map.insert("table_am_handler", "Pseudo-types");
        map.insert("anyrange", "Pseudo-types");
        map.insert("anycompatible", "Pseudo-types");
        map.insert("anycompatiblearray", "Pseudo-types");
        map.insert("anycompatiblenonarray", "Pseudo-types");
        map.insert("anycompatiblerange", "Pseudo-types");
        map.insert("anymultirange", "Pseudo-types");
        map.insert("anycompatiblemultirange", "Pseudo-types");
        map.insert("pg_brin_bloom_summary", "Internal-use types");
        map.insert("pg_brin_minmax_multi_summary", "Internal-use types");
        map.insert("_bool", "Array types");
        map.insert("_bytea", "Array types");
        map.insert("_char", "Array types");
        map.insert("_name", "Array types");
        map.insert("_int8", "Array types");
        map.insert("_int2", "Array types");
        map.insert("_int2vector", "Array types");
        map.insert("_int4", "Array types");
        map.insert("_regproc", "Array types");
        map.insert("_text", "Array types");
        map.insert("_oid", "Array types");
        map.insert("_tid", "Array types");
        map.insert("_xid", "Array types");
        map.insert("_cid", "Array types");
        map.insert("_oidvector", "Array types");
        map.insert("_pg_type", "Array types");
        map.insert("_pg_attribute", "Array types");
        map.insert("_pg_proc", "Array types");
        map.insert("_pg_class", "Array types");
        map.insert("_json", "Array types");
        map.insert("_xml", "Array types");
        map.insert("_xid8", "Array types");
        map.insert("_point", "Array types");
        map.insert("_lseg", "Array types");
        map.insert("_path", "Array types");
        map.insert("_box", "Array types");
        map.insert("_polygon", "Array types");
        map.insert("_line", "Array types");
        map.insert("_float4", "Array types");
        map.insert("_float8", "Array types");
        map.insert("_circle", "Array types");
        map.insert("_money", "Array types");
        map.insert("_macaddr", "Array types");
        map.insert("_inet", "Array types");
        map.insert("_cidr", "Array types");
        map.insert("_macaddr8", "Array types");
        map.insert("_aclitem", "Array types");
        map.insert("_bpchar", "Array types");
        map.insert("_varchar", "Array types");
        map.insert("_date", "Array types");
        map.insert("_time", "Array types");
        map.insert("_timestamp", "Array types");
        map.insert("_timestamptz", "Array types");
        map.insert("_interval", "Array types");
        map.insert("_timetz", "Array types");
        map.insert("_bit", "Array types");
        map.insert("_varbit", "Array types");
        map.insert("_numeric", "Array types");
        map.insert("_refcursor", "Array types");
        map.insert("_regprocedure", "Array types");
        map.insert("_regoper", "Array types");
        map.insert("_regoperator", "Array types");
        map.insert("_regclass", "Array types");
        map.insert("_regcollation", "Array types");
        map.insert("_regtype", "Array types");
        map.insert("_regrole", "Array types");
        map.insert("_regnamespace", "Array types");
        map.insert("_uuid", "Array types");
        map.insert("_pg_lsn", "Array types");
        map.insert("_tsvector", "Array types");
        map.insert("_gtsvector", "Array types");
        map.insert("_tsquery", "Array types");
        map.insert("_regconfig", "Array types");
        map.insert("_regdictionary", "Array types");
        map.insert("_jsonb", "Array types");
        map.insert("_jsonpath", "Array types");
        map.insert("_txid_snapshot", "Array types");
        map.insert("_pg_snapshot", "Array types");
        map.insert("_int4range", "Array types");
        map.insert("_numrange", "Array types");
        map.insert("_tsrange", "Array types");
        map.insert("_tstzrange", "Array types");
        map.insert("_daterange", "Array types");
        map.insert("_int8range", "Array types");
        map.insert("_int4multirange", "Array types");
        map.insert("_nummultirange", "Array types");
        map.insert("_tsmultirange", "Array types");
        map.insert("_tstzmultirange", "Array types");
        map.insert("_datemultirange", "Array types");
        map.insert("_int8multirange", "Array types");
        map.insert("_cstring", "Array types");
        map.insert("pg_attrdef", "Composite types");
        map.insert("_pg_attrdef", "Array types");
        map.insert("pg_constraint", "Composite types");
        map.insert("_pg_constraint", "Array types");
        map.insert("pg_inherits", "Composite types");
        map.insert("_pg_inherits", "Array types");
        map.insert("pg_index", "Composite types");
        map.insert("_pg_index", "Array types");
        map.insert("pg_operator", "Composite types");
        map.insert("_pg_operator", "Array types");
        map.insert("pg_opfamily", "Composite types");
        map.insert("_pg_opfamily", "Array types");
        map.insert("pg_opclass", "Composite types");
        map.insert("_pg_opclass", "Array types");
        map.insert("pg_am", "Composite types");
        map.insert("_pg_am", "Array types");
        map.insert("pg_amop", "Composite types");
        map.insert("_pg_amop", "Array types");
        map.insert("pg_amproc", "Composite types");
        map.insert("_pg_amproc", "Array types");
        map.insert("pg_language", "Composite types");
        map.insert("_pg_language", "Array types");
        map.insert("pg_largeobject_metadata", "Composite types");
        map.insert("_pg_largeobject_metadata", "Array types");
        map.insert("pg_largeobject", "Composite types");
        map.insert("_pg_largeobject", "Array types");
        map.insert("pg_aggregate", "Composite types");
        map.insert("_pg_aggregate", "Array types");
        map.insert("pg_statistic", "Composite types");
        map.insert("_pg_statistic", "Array types");
        map.insert("pg_statistic_ext", "Composite types");
        map.insert("_pg_statistic_ext", "Array types");
        map.insert("pg_statistic_ext_data", "Composite types");
        map.insert("_pg_statistic_ext_data", "Array types");
        map.insert("pg_rewrite", "Composite types");
        map.insert("_pg_rewrite", "Array types");
        map.insert("pg_trigger", "Composite types");
        map.insert("_pg_trigger", "Array types");
        map.insert("pg_event_trigger", "Composite types");
        map.insert("_pg_event_trigger", "Array types");
        map.insert("pg_description", "Composite types");
        map.insert("_pg_description", "Array types");
        map.insert("pg_cast", "Composite types");
        map.insert("_pg_cast", "Array types");
        map.insert("pg_enum", "Composite types");
        map.insert("_pg_enum", "Array types");
        map.insert("pg_namespace", "Composite types");
        map.insert("_pg_namespace", "Array types");
        map.insert("pg_conversion", "Composite types");
        map.insert("_pg_conversion", "Array types");
        map.insert("pg_depend", "Composite types");
        map.insert("_pg_depend", "Array types");
        map.insert("pg_database", "Composite types");
        map.insert("_pg_database", "Array types");
        map.insert("pg_db_role_setting", "Composite types");
        map.insert("_pg_db_role_setting", "Array types");
        map.insert("pg_tablespace", "Composite types");
        map.insert("_pg_tablespace", "Array types");
        map.insert("pg_authid", "Composite types");
        map.insert("_pg_authid", "Array types");
        map.insert("pg_auth_members", "Composite types");
        map.insert("_pg_auth_members", "Array types");
        map.insert("pg_shdepend", "Composite types");
        map.insert("_pg_shdepend", "Array types");
        map.insert("pg_shdescription", "Composite types");
        map.insert("_pg_shdescription", "Array types");
        map.insert("pg_ts_config", "Composite types");
        map.insert("_pg_ts_config", "Array types");
        map.insert("pg_ts_config_map", "Composite types");
        map.insert("_pg_ts_config_map", "Array types");
        map.insert("pg_ts_dict", "Composite types");
        map.insert("_pg_ts_dict", "Array types");
        map.insert("pg_ts_parser", "Composite types");
        map.insert("_pg_ts_parser", "Array types");
        map.insert("pg_ts_template", "Composite types");
        map.insert("_pg_ts_template", "Array types");
        map.insert("pg_extension", "Composite types");
        map.insert("_pg_extension", "Array types");
        map.insert("pg_foreign_data_wrapper", "Composite types");
        map.insert("_pg_foreign_data_wrapper", "Array types");
        map.insert("pg_foreign_server", "Composite types");
        map.insert("_pg_foreign_server", "Array types");
        map.insert("pg_user_mapping", "Composite types");
        map.insert("_pg_user_mapping", "Array types");
        map.insert("pg_foreign_table", "Composite types");
        map.insert("_pg_foreign_table", "Array types");
        map.insert("pg_policy", "Composite types");
        map.insert("_pg_policy", "Array types");
        map.insert("pg_replication_origin", "Composite types");
        map.insert("_pg_replication_origin", "Array types");
        map.insert("pg_default_acl", "Composite types");
        map.insert("_pg_default_acl", "Array types");
        map.insert("pg_init_privs", "Composite types");
        map.insert("_pg_init_privs", "Array types");
        map.insert("pg_seclabel", "Composite types");
        map.insert("_pg_seclabel", "Array types");
        map.insert("pg_shseclabel", "Composite types");
        map.insert("_pg_shseclabel", "Array types");
        map.insert("pg_collation", "Composite types");
        map.insert("_pg_collation", "Array types");
        map.insert("pg_parameter_acl", "Composite types");
        map.insert("_pg_parameter_acl", "Array types");
        map.insert("pg_partitioned_table", "Composite types");
        map.insert("_pg_partitioned_table", "Array types");
        map.insert("pg_range", "Composite types");
        map.insert("_pg_range", "Array types");
        map.insert("pg_transform", "Composite types");
        map.insert("_pg_transform", "Array types");
        map.insert("pg_sequence", "Composite types");
        map.insert("_pg_sequence", "Array types");
        map.insert("pg_publication", "Composite types");
        map.insert("_pg_publication", "Array types");
        map.insert("pg_publication_namespace", "Composite types");
        map.insert("_pg_publication_namespace", "Array types");
        map.insert("pg_publication_rel", "Composite types");
        map.insert("_pg_publication_rel", "Array types");
        map.insert("pg_subscription", "Composite types");
        map.insert("_pg_subscription", "Array types");
        map.insert("pg_subscription_rel", "Composite types");
        map.insert("_pg_subscription_rel", "Array types");
        map.insert("pg_roles", "Composite types");
        map.insert("_pg_roles", "Array types");
        map.insert("pg_shadow", "Composite types");
        map.insert("_pg_shadow", "Array types");
        map.insert("pg_group", "Composite types");
        map.insert("_pg_group", "Array types");
        map.insert("pg_user", "Composite types");
        map.insert("_pg_user", "Array types");
        map.insert("pg_policies", "Composite types");
        map.insert("_pg_policies", "Array types");
        map.insert("pg_rules", "Composite types");
        map.insert("_pg_rules", "Array types");
        map.insert("pg_views", "Composite types");
        map.insert("_pg_views", "Array types");
        map.insert("pg_tables", "Composite types");
        map.insert("_pg_tables", "Array types");
        map.insert("pg_matviews", "Composite types");
        map.insert("_pg_matviews", "Array types");
        map.insert("pg_indexes", "Composite types");
        map.insert("_pg_indexes", "Array types");
        map.insert("pg_sequences", "Composite types");
        map.insert("_pg_sequences", "Array types");
        map.insert("pg_stats", "Composite types");
        map.insert("_pg_stats", "Array types");
        map.insert("pg_stats_ext", "Composite types");
        map.insert("_pg_stats_ext", "Array types");
        map.insert("pg_stats_ext_exprs", "Composite types");
        map.insert("_pg_stats_ext_exprs", "Array types");
        map.insert("pg_publication_tables", "Composite types");
        map.insert("_pg_publication_tables", "Array types");
        map.insert("pg_locks", "Composite types");
        map.insert("_pg_locks", "Array types");
        map.insert("pg_cursors", "Composite types");
        map.insert("_pg_cursors", "Array types");
        map.insert("pg_available_extensions", "Composite types");
        map.insert("_pg_available_extensions", "Array types");
        map.insert("pg_available_extension_versions", "Composite types");
        map.insert("_pg_available_extension_versions", "Array types");
        map.insert("pg_prepared_xacts", "Composite types");
        map.insert("_pg_prepared_xacts", "Array types");
        map.insert("pg_prepared_statements", "Composite types");
        map.insert("_pg_prepared_statements", "Array types");
        map.insert("pg_seclabels", "Composite types");
        map.insert("_pg_seclabels", "Array types");
        map.insert("pg_settings", "Composite types");
        map.insert("_pg_settings", "Array types");
        map.insert("pg_file_settings", "Composite types");
        map.insert("_pg_file_settings", "Array types");
        map.insert("pg_hba_file_rules", "Composite types");
        map.insert("_pg_hba_file_rules", "Array types");
        map.insert("pg_ident_file_mappings", "Composite types");
        map.insert("_pg_ident_file_mappings", "Array types");
        map.insert("pg_timezone_abbrevs", "Composite types");
        map.insert("_pg_timezone_abbrevs", "Array types");
        map.insert("pg_timezone_names", "Composite types");
        map.insert("_pg_timezone_names", "Array types");
        map.insert("pg_config", "Composite types");
        map.insert("_pg_config", "Array types");
        map.insert("pg_shmem_allocations", "Composite types");
        map.insert("_pg_shmem_allocations", "Array types");
        map.insert("pg_backend_memory_contexts", "Composite types");
        map.insert("_pg_backend_memory_contexts", "Array types");
        map.insert("pg_stat_all_tables", "Composite types");
        map.insert("_pg_stat_all_tables", "Array types");
        map.insert("pg_stat_xact_all_tables", "Composite types");
        map.insert("_pg_stat_xact_all_tables", "Array types");
        map.insert("pg_stat_sys_tables", "Composite types");
        map.insert("_pg_stat_sys_tables", "Array types");
        map.insert("pg_stat_xact_sys_tables", "Composite types");
        map.insert("_pg_stat_xact_sys_tables", "Array types");
        map.insert("pg_stat_user_tables", "Composite types");
        map.insert("_pg_stat_user_tables", "Array types");
        map.insert("pg_stat_xact_user_tables", "Composite types");
        map.insert("_pg_stat_xact_user_tables", "Array types");
        map.insert("pg_statio_all_tables", "Composite types");
        map.insert("_pg_statio_all_tables", "Array types");
        map.insert("pg_statio_sys_tables", "Composite types");
        map.insert("_pg_statio_sys_tables", "Array types");
        map.insert("pg_statio_user_tables", "Composite types");
        map.insert("_pg_statio_user_tables", "Array types");
        map.insert("pg_stat_all_indexes", "Composite types");
        map.insert("_pg_stat_all_indexes", "Array types");
        map.insert("pg_stat_sys_indexes", "Composite types");
        map.insert("_pg_stat_sys_indexes", "Array types");
        map.insert("pg_stat_user_indexes", "Composite types");
        map.insert("_pg_stat_user_indexes", "Array types");
        map.insert("pg_statio_all_indexes", "Composite types");
        map.insert("_pg_statio_all_indexes", "Array types");
        map.insert("pg_statio_sys_indexes", "Composite types");
        map.insert("_pg_statio_sys_indexes", "Array types");
        map.insert("pg_statio_user_indexes", "Composite types");
        map.insert("_pg_statio_user_indexes", "Array types");
        map.insert("pg_statio_all_sequences", "Composite types");
        map.insert("_pg_statio_all_sequences", "Array types");
        map.insert("pg_statio_sys_sequences", "Composite types");
        map.insert("_pg_statio_sys_sequences", "Array types");
        map.insert("pg_statio_user_sequences", "Composite types");
        map.insert("_pg_statio_user_sequences", "Array types");
        map.insert("pg_stat_activity", "Composite types");
        map.insert("_pg_stat_activity", "Array types");
        map.insert("pg_stat_replication", "Composite types");
        map.insert("_pg_stat_replication", "Array types");
        map.insert("pg_stat_slru", "Composite types");
        map.insert("_pg_stat_slru", "Array types");
        map.insert("pg_stat_wal_receiver", "Composite types");
        map.insert("_pg_stat_wal_receiver", "Array types");
        map.insert("pg_stat_recovery_prefetch", "Composite types");
        map.insert("_pg_stat_recovery_prefetch", "Array types");
        map.insert("pg_stat_subscription", "Composite types");
        map.insert("_pg_stat_subscription", "Array types");
        map.insert("pg_stat_ssl", "Composite types");
        map.insert("_pg_stat_ssl", "Array types");
        map.insert("pg_stat_gssapi", "Composite types");
        map.insert("_pg_stat_gssapi", "Array types");
        map.insert("pg_replication_slots", "Composite types");
        map.insert("_pg_replication_slots", "Array types");
        map.insert("pg_stat_replication_slots", "Composite types");
        map.insert("_pg_stat_replication_slots", "Array types");
        map.insert("pg_stat_database", "Composite types");
        map.insert("_pg_stat_database", "Array types");
        map.insert("pg_stat_database_conflicts", "Composite types");
        map.insert("_pg_stat_database_conflicts", "Array types");
        map.insert("pg_stat_user_functions", "Composite types");
        map.insert("_pg_stat_user_functions", "Array types");
        map.insert("pg_stat_xact_user_functions", "Composite types");
        map.insert("_pg_stat_xact_user_functions", "Array types");
        map.insert("pg_stat_archiver", "Composite types");
        map.insert("_pg_stat_archiver", "Array types");
        map.insert("pg_stat_bgwriter", "Composite types");
        map.insert("_pg_stat_bgwriter", "Array types");
        map.insert("pg_stat_wal", "Composite types");
        map.insert("_pg_stat_wal", "Array types");
        map.insert("pg_stat_progress_analyze", "Composite types");
        map.insert("_pg_stat_progress_analyze", "Array types");
        map.insert("pg_stat_progress_vacuum", "Composite types");
        map.insert("_pg_stat_progress_vacuum", "Array types");
        map.insert("pg_stat_progress_cluster", "Composite types");
        map.insert("_pg_stat_progress_cluster", "Array types");
        map.insert("pg_stat_progress_create_index", "Composite types");
        map.insert("_pg_stat_progress_create_index", "Array types");
        map.insert("pg_stat_progress_basebackup", "Composite types");
        map.insert("_pg_stat_progress_basebackup", "Array types");
        map.insert("pg_stat_progress_copy", "Composite types");
        map.insert("_pg_stat_progress_copy", "Array types");
        map.insert("pg_user_mappings", "Composite types");
        map.insert("_pg_user_mappings", "Array types");
        map.insert("pg_replication_origin_status", "Composite types");
        map.insert("_pg_replication_origin_status", "Array types");
        map.insert("pg_stat_subscription_stats", "Composite types");
        map.insert("_pg_stat_subscription_stats", "Array types");
        map.insert("cardinal_number", "Numeric types");
        map.insert("_cardinal_number", "Array types");
        map.insert("character_data", "String types");
        map.insert("_character_data", "Array types");
        map.insert("sql_identifier", "String types");
        map.insert("_sql_identifier", "Array types");
        map.insert("information_schema_catalog_name", "Composite types");
        map.insert("_information_schema_catalog_name", "Array types");
        map.insert("time_stamp", "Date/time types");
        map.insert("_time_stamp", "Array types");
        map.insert("yes_or_no", "String types");
        map.insert("_yes_or_no", "Array types");
        map.insert("applicable_roles", "Composite types");
        map.insert("_applicable_roles", "Array types");
        map.insert("administrable_role_authorizations", "Composite types");
        map.insert("_administrable_role_authorizations", "Array types");
        map.insert("attributes", "Composite types");
        map.insert("_attributes", "Array types");
        map.insert("character_sets", "Composite types");
        map.insert("_character_sets", "Array types");
        map.insert("check_constraint_routine_usage", "Composite types");
        map.insert("_check_constraint_routine_usage", "Array types");
        map.insert("check_constraints", "Composite types");
        map.insert("_check_constraints", "Array types");
        map.insert("collations", "Composite types");
        map.insert("_collations", "Array types");
        map.insert("collation_character_set_applicability", "Composite types");
        map.insert("_collation_character_set_applicability", "Array types");
        map.insert("column_column_usage", "Composite types");
        map.insert("_column_column_usage", "Array types");
        map.insert("column_domain_usage", "Composite types");
        map.insert("_column_domain_usage", "Array types");
        map.insert("column_privileges", "Composite types");
        map.insert("_column_privileges", "Array types");
        map.insert("column_udt_usage", "Composite types");
        map.insert("_column_udt_usage", "Array types");
        map.insert("columns", "Composite types");
        map.insert("_columns", "Array types");
        map.insert("constraint_column_usage", "Composite types");
        map.insert("_constraint_column_usage", "Array types");
        map.insert("constraint_table_usage", "Composite types");
        map.insert("_constraint_table_usage", "Array types");
        map.insert("domain_constraints", "Composite types");
        map.insert("_domain_constraints", "Array types");
        map.insert("domain_udt_usage", "Composite types");
        map.insert("_domain_udt_usage", "Array types");
        map.insert("domains", "Composite types");
        map.insert("_domains", "Array types");
        map.insert("enabled_roles", "Composite types");
        map.insert("_enabled_roles", "Array types");
        map.insert("key_column_usage", "Composite types");
        map.insert("_key_column_usage", "Array types");
        map.insert("parameters", "Composite types");
        map.insert("_parameters", "Array types");
        map.insert("referential_constraints", "Composite types");
        map.insert("_referential_constraints", "Array types");
        map.insert("role_column_grants", "Composite types");
        map.insert("_role_column_grants", "Array types");
        map.insert("routine_column_usage", "Composite types");
        map.insert("_routine_column_usage", "Array types");
        map.insert("routine_privileges", "Composite types");
        map.insert("_routine_privileges", "Array types");
        map.insert("role_routine_grants", "Composite types");
        map.insert("_role_routine_grants", "Array types");
        map.insert("routine_routine_usage", "Composite types");
        map.insert("_routine_routine_usage", "Array types");
        map.insert("routine_sequence_usage", "Composite types");
        map.insert("_routine_sequence_usage", "Array types");
        map.insert("routine_table_usage", "Composite types");
        map.insert("_routine_table_usage", "Array types");
        map.insert("routines", "Composite types");
        map.insert("_routines", "Array types");
        map.insert("schemata", "Composite types");
        map.insert("_schemata", "Array types");
        map.insert("sequences", "Composite types");
        map.insert("_sequences", "Array types");
        map.insert("sql_features", "Composite types");
        map.insert("_sql_features", "Array types");
        map.insert("sql_implementation_info", "Composite types");
        map.insert("_sql_implementation_info", "Array types");
        map.insert("sql_parts", "Composite types");
        map.insert("_sql_parts", "Array types");
        map.insert("sql_sizing", "Composite types");
        map.insert("_sql_sizing", "Array types");
        map.insert("table_constraints", "Composite types");
        map.insert("_table_constraints", "Array types");
        map.insert("table_privileges", "Composite types");
        map.insert("_table_privileges", "Array types");
        map.insert("role_table_grants", "Composite types");
        map.insert("_role_table_grants", "Array types");
        map.insert("tables", "Composite types");
        map.insert("_tables", "Array types");
        map.insert("transforms", "Composite types");
        map.insert("_transforms", "Array types");
        map.insert("triggered_update_columns", "Composite types");
        map.insert("_triggered_update_columns", "Array types");
        map.insert("triggers", "Composite types");
        map.insert("_triggers", "Array types");
        map.insert("udt_privileges", "Composite types");
        map.insert("_udt_privileges", "Array types");
        map.insert("role_udt_grants", "Composite types");
        map.insert("_role_udt_grants", "Array types");
        map.insert("usage_privileges", "Composite types");
        map.insert("_usage_privileges", "Array types");
        map.insert("role_usage_grants", "Composite types");
        map.insert("_role_usage_grants", "Array types");
        map.insert("user_defined_types", "Composite types");
        map.insert("_user_defined_types", "Array types");
        map.insert("view_column_usage", "Composite types");
        map.insert("_view_column_usage", "Array types");
        map.insert("view_routine_usage", "Composite types");
        map.insert("_view_routine_usage", "Array types");
        map.insert("view_table_usage", "Composite types");
        map.insert("_view_table_usage", "Array types");
        map.insert("views", "Composite types");
        map.insert("_views", "Array types");
        map.insert("data_type_privileges", "Composite types");
        map.insert("_data_type_privileges", "Array types");
        map.insert("element_types", "Composite types");
        map.insert("_element_types", "Array types");
        map.insert("_pg_foreign_table_columns", "Composite types");
        map.insert("__pg_foreign_table_columns", "Array types");
        map.insert("column_options", "Composite types");
        map.insert("_column_options", "Array types");
        map.insert("_pg_foreign_data_wrappers", "Composite types");
        map.insert("__pg_foreign_data_wrappers", "Array types");
        map.insert("foreign_data_wrapper_options", "Composite types");
        map.insert("_foreign_data_wrapper_options", "Array types");
        map.insert("foreign_data_wrappers", "Composite types");
        map.insert("_foreign_data_wrappers", "Array types");
        map.insert("_pg_foreign_servers", "Composite types");
        map.insert("__pg_foreign_servers", "Array types");
        map.insert("foreign_server_options", "Composite types");
        map.insert("_foreign_server_options", "Array types");
        map.insert("foreign_servers", "Composite types");
        map.insert("_foreign_servers", "Array types");
        map.insert("_pg_foreign_tables", "Composite types");
        map.insert("__pg_foreign_tables", "Array types");
        map.insert("foreign_table_options", "Composite types");
        map.insert("_foreign_table_options", "Array types");
        map.insert("foreign_tables", "Composite types");
        map.insert("_foreign_tables", "Array types");
        map.insert("__pg_user_mappings", "Array types");
        map.insert("user_mapping_options", "Composite types");
        map.insert("_user_mapping_options", "Array types");
        map.insert("user_mappings", "Composite types");
        map.insert("_user_mappings", "Array types");
        map.insert("data_src", "Composite types");
        map.insert("_data_src", "Array types");
        map.insert("datsrcln", "Composite types");
        map.insert("_datsrcln", "Array types");
        map.insert("deriv_cd", "Composite types");
        map.insert("_deriv_cd", "Array types");
        map.insert("fd_group", "Composite types");
        map.insert("_fd_group", "Array types");
        map.insert("food_des", "Composite types");
        map.insert("_food_des", "Array types");
        map.insert("footnote", "Composite types");
        map.insert("_footnote", "Array types");
        map.insert("nut_data", "Composite types");
        map.insert("_nut_data", "Array types");
        map.insert("nutr_def", "Composite types");
        map.insert("_nutr_def", "Array types");
        map.insert("src_cd", "Composite types");
        map.insert("_src_cd", "Array types");
        map.insert("weight", "Composite types");
        map.insert("_weight", "Array types");
        map
    };
}
